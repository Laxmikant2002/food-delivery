generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  name      String
  orders    Order[]
  ratings   Rating[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Order {
  id              String         @id @default(uuid()) @db.Uuid
  user            User           @relation(fields: [user_id], references: [id])
  user_id         String         @db.Uuid @map("userId")
  restaurant      Restaurant     @relation(fields: [restaurant_id], references: [id])  
  restaurant_id   String         @db.Uuid @map("restaurantId")
  deliveryAgent   DeliveryAgent? @relation(fields: [delivery_agent_id], references: [id])
  delivery_agent_id String?      @db.Uuid @map("deliveryAgentId")
  status          String         @default("PENDING")
  total           Float
  delivery_address String        @map("deliveryAddress")
  items           OrderItem[]
  rating          Rating?
  rejection_reason String?       @map("rejectionReason")
  created_at       DateTime      @default(now()) @map("createdAt")
  updated_at       DateTime      @updatedAt @map("updatedAt")

  @@map("orders")
}

model Rating {
  id               String     @id @default(uuid()) @db.Uuid
  order            Order      @relation(fields: [orderId], references: [id])
  orderId          String     @unique @db.Uuid
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @db.Uuid
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId     String     @db.Uuid
  restaurantRating Int
  deliveryRating   Int?
  comment          String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("ratings")
}

model Restaurant {
  id                String     @id @default(uuid()) @db.Uuid
  name              String
  description       String?
  cuisine           String[]
  isOnline          Boolean    @default(true)
  availabilityStart DateTime
  availabilityEnd   DateTime
  menuItems         MenuItem[]
  orders            Order[]
  ratings           Rating[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("restaurants")
}

model MenuItem {
  id           String      @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  price        Float
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String      @db.Uuid
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("menu_items")
}

model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @db.Uuid
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @db.Uuid
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("order_items")
}

model DeliveryAgent {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  isAvailable Boolean @default(true)
  orders      Order[]

  @@map("delivery_agents")
}
